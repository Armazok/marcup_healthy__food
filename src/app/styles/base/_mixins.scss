@use "sass:math";
@use "function";
@use "common";

//Подключение шрифта
@mixin font($font_name, $file_name, $weight, $style) {
    @font-face {
        font-family: $font_name;
        font-display: swap;
        src: url("../fonts/#{$file_name}.woff2") format("woff2"), url("../fonts/#{$file_name}.woff") format("woff");
        font-weight: #{$weight};
        font-style: #{$style};
    }
}


//Currency
@mixin currency($sym) {
    &::after {
        content: "#{$sym}";
    }
}

// Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
    display: grid;
    gap: $gap;
    grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}


//Адаптивное свойство
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: common.$containerWidth, $widthTo: common.$minWidth, $keepSize: 0) {
    // Брейк-поинты в EM
    $widthFromMedia: function.em($widthFrom);
    $widthToMedia: function.em($widthTo);
    // Ночальное и конечное значение в REM
    $minSizeValue: function.rem($minSize);
    $startSizeValue: function.rem($startSize);
    // Пересчитываем переменные относительно
    // размера шрифта по умолчанию
    $minWidth: math.div(common.$minWidth, 16);
    $maxWidth: math.div(common.$maxWidth, 16);
    $containerWidth: math.div(common.$containerWidth, 16);
    $addSize: math.div($startSize - $minSize, 16);
    $widthTo: math.div($widthTo, 16);
    $widthFrom: math.div($widthFrom, 16);
    // Если указано ограничение у контейнера,
    // либо указана стартовая или конечная ширина
    // включаем режим работы в промежутке ширин
    @if (common.$maxWidthContainer > 0 or $widthFrom != $containerWidth or $widthTo != $minWidth) and $widthFrom > $widthTo {
        // Если стартовая ширина равна ширине контейнера + отступы,
        // или указана настройка "keepSize" ставим значение
        // по умолчанию равное стартовому размеру
        @if $widthFrom == $containerWidth or $keepSize == 1 or $keepSize == 2 {
            @media (min-width: $widthFromMedia) {
                #{$property}: $startSizeValue;
            }
        }
        // Адаптируем размер в промежутке между указанными ширинами вьюпорта
        @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
            #{$property}: calc(#{$minSizeValue} + #{$addSize} * (((100vw - #{$widthTo + rem})) / ((#{$widthFrom - $widthTo}))));
        }
        // Если конечная ширина равна минимальной ширине
        // или указана настройка "keepSize" ставим значение
        // по умолчанию равное конечному размеру
        @if $widthTo == $minWidth or $keepSize == 1 or $keepSize == 3 {
            @media (max-width: $widthToMedia) {
                #{$property}: $minSizeValue;
            }
        }
    } @else {
        // Режим работы по всей ширине вьюпорта
        #{$property}: calc(#{$minSizeValue} + #{$addSize} * (((100vw - #{$widthTo + rem})) / ((#{$maxWidth - $widthTo}))));
    }
}

